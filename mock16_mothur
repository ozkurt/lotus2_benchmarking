#Setting the working directories:
set.dir(output=$OUTP)
set.dir(input=$INP)

#Demultiplexing
make.file(inputdir=$INP, type=gz, prefix=stability)
make.contigs(file=$OUTP/stability.files, processors=12)
summary.seqs(fasta=$OUTP/stability.trim.contigs.fasta)

#Removing the primers:
trim.seqs(fasta=stability.trim.contigs.fasta, oligos=$OUTP/pcrTest_mock.oligos, pdiffs=1, checkorient=t)
summary.seqs($OUTP/stability.trim.contigs.trim.fasta)
screen.seqs(fasta=$OUTP/stability.trim.contigs.trim.fasta, group=$OUTP/stability.contigs.groups, maxambig=0, maxlength=292)
summary.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.fasta)

#Truncating the reads:
chop.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.fasta, numbases=220, processors=12,keep=F)
unique.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.fasta)
count.seqs(name=$OUTP/stability.trim.contigs.trim.good.chop.names, group=$OUTP/stability.contigs.good.groups)
summary.seqs(count=$OUTP/stability.trim.contigs.trim.good.chop.count_table)

#####Finding the positions for the pcr.seqs cmd:
pcr.seqs(fasta=$OUTP/Ecoli_sequence.fasta, oligos=$OUTP/pcrTest_mock.oligos)
align.seqs(fasta=$OUTP/Ecoli_sequence.pcr.fasta, reference=silva.138.1.bacteria.gold.align)
summary.seqs(fasta=$OUTP/Ecoli_sequence.pcr.align)
#########

#Start and end positions are decided based on the summary file:
pcr.seqs(fasta=silva.138.1.bacteria.gold.align, start=13862, end=23444, keepdots=F, processors=12)
rename.file(input=silva.138.1.bacteria.gold.pcr.align, new=silva.mock.fasta)
summary.seqs(fasta=silva.mock.fasta)

#Alignment:
align.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.fasta, reference=silva.mock.fasta)
summary.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.align, count=$OUTP/stability.trim.contigs.trim.good.chop.count_table)

#Start and end positions are decided based on the summary file:
screen.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.align, count=$OUTP//stability.trim.contigs.trim.good.chop.count_table, summary=$OUTP/stability.trim.contigs.trim.good.chop.unique.summary, start=2, end=7325, maxhomop=8)
summary.seqs(fasta=current, count=current)

#Filtering:
filter.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.align, vertical=T, trump=.,processors=12)
unique.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.fasta, count=$OUTP/stability.trim.contigs.trim.good.chop.good.count_table)
pre.cluster(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.fasta, count=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.count_table, diffs=2)

#Chimera detection:
chimera.vsearch(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.fasta, count=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.count_table, dereplicate=t)
remove.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.fasta, accnos=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.denovo.vsearch.accnos)
summary.seqs(fasta=current, count=current)

#Classifying the sequences:
classify.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.pick.fasta, count=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=silva.nr_v138_1.align, taxonomy=silva.nr_v138_1.tax, cutoff=80)

#Removing the "unknown" taxa:
remove.lineage(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.pick.fasta, count=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.pick.nr_v138_1.wang.taxonomy, taxon=unknown;)
summary.tax(taxonomy=current, count=current)

#OTU clustering:
dist.seqs(fasta=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.pick.pick.fasta, cutoff=0.03)
cluster(column=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.pick.pick.dist, count=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table)
make.shared(list=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list, count=$OUTP/stability.trim.contigs.trim.good.chop.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, label=0.03)
